version: '3.8'
services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: "default"
    networks:
      - favorite_network

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: "default"
    networks:
      - favorite_network

  postgres:
    image: postgres:13-alpine
    container_name: postgres-dev
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: favorite_products_db_dev
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d favorite_products_db_dev" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - favorite_network

  redis:
    image: redis:7-alpine
    container_name: redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes", "--loglevel", "warning" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - favorite_network

  nginx:
    image: nginx:alpine
    container_name: nginx-dev
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
    networks:
      - favorite_network

networks:
  favorite_network:
    driver: bridge